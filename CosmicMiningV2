import matplotlib.pyplot as plt
import numpy as np
from tkinter import filedialog, messagebox, Tk
from numpy.typing import NDArray
from scipy.signal import savgol_filter
from colorama import init
from colorama import Fore, Style

print("Welcome to Karan's tbl_file_to_spectra graph converter for Cosmic Mining")

def print_as_gray(text: str) -> None:
    """Print text in gray color."""
    print(Fore.LIGHTBLACK_EX + text + Style.RESET_ALL)

def is_file_accessible(file_path: str) -> bool:
    """Check if a file exists and is accessible."""
    try:
        with open(file_path, 'r'):
            return True
    except (FileNotFoundError, IOError) as e:
        messagebox.showerror("Error", f"Failed to access the file: {e}. Please try again.")
        return False


def request_valid_file() -> str:
    """Prompt the user to select a valid .tbl file."""
    root = Tk()
    root.withdraw()

    file_path: str = ""

    while True:
        file_path = filedialog.askopenfilename(
            title="Pick your .tbl file please.",
            filetypes=(("Text files", "*.tbl"), ("All files", "*.*"))
        ) or ""

        if file_path and is_file_accessible(file_path):
            root.destroy()
            return file_path
        elif not file_path:
            root.destroy()
            return ""


def read_file_content(file_path: str) -> list[str]:
    """Read and return the content of a file as a list of lines."""
    with open(file_path, 'r') as file:
        return file.readlines()


def parse_data(lines: list[str]) -> tuple[NDArray[np.float64], NDArray[np.float64], NDArray[np.float64], str]:
    """
    Extract wavelength (x), flux values (y), and errors from the lines, sort by wavelength,
    and extract the target name.
    """
    x: list[float] = []
    y: list[float] = []
    errors: list[float] = []
    target_name: str = ""

    for i, line in enumerate(lines):
        if i == 0:
            continue
        parts = line.strip().split()
        if len(parts) >= 2:
            try:
                x.append(float(parts[0]))
                y.append(float(parts[1]))
                if len(parts) > 2:
                    errors.append(float(parts[2]))  # Extract error if available
                else:
                    errors.append(0.1)  # Default error if not provided
            except ValueError:
                print_as_gray(f"Skipping line {i + 1} due to invalid data format: {line.strip()}")

    # Extract target name from metadata
    for line in lines:
        if line.startswith("\\OBJECT"):
            target_name = line.split("=")[1].strip()
            break

    if not x or not y:
        raise ValueError("No valid data found in the file.")

    x_np = np.array(x, dtype=np.float64)
    y_np = np.array(y, dtype=np.float64)
    errors_np = np.array(errors, dtype=np.float64)

    # Sort data based on wavelength (x)
    sorted_indices = np.argsort(x_np)
    return x_np[sorted_indices], y_np[sorted_indices], errors_np[sorted_indices], target_name


def get_threshold() -> float:
    """Prompt the user for the anomaly detection threshold."""
    while True:
        try:
            value = float(input("Enter a percentage threshold (e.g., 30 for 30%): "))
            if 0 <= value <= 100:
                return value / 100
            else:
                print("Please enter a valid percentage between 0 and 100.")
        except ValueError:
            print("Invalid input. Please enter a numerical value.")


def find_anomalies(x: NDArray[np.float64], y: NDArray[np.float64], continuum: NDArray[np.float64],
                   threshold: float) -> tuple[NDArray[np.float64], NDArray[np.float64]]:
    """Identify anomalous points where the difference from the continuum exceeds the threshold."""
    if len(y) != len(continuum):
        raise ValueError("y and continuum arrays must have the same length")
    diff = np.abs(y - continuum)
    anomalies = diff >= threshold * np.abs(continuum)
    return x[anomalies], y[anomalies]


def fit_continuum(x: NDArray[np.float64], y: NDArray[np.float64], order: int = 3) -> NDArray[np.float64]:
    """
    Fit a polynomial to the data to estimate the continuum.

    Args:
        x: Wavelength values.
        y: Flux values.
        order: The degree of the polynomial to fit.  Higher order can fit more complex continua
            but also increase the risk of overfitting.  Default is 3.

    Returns:
        The fitted continuum values evaluated at the input x values.
    """

    valid_indices = ~np.isnan(x) & ~np.isnan(y)
    x_valid = x[valid_indices]
    y_valid = y[valid_indices]

    if len(x_valid) < order + 1:
        raise ValueError(
            f"Need at least {order + 1} valid data points to fit a polynomial of order {order}.")
    coeffs = np.polyfit(x_valid, y_valid, order)
    return np.polyval(coeffs, x)  # type: ignore


def get_rolling_average(y: NDArray[np.float64], window_size: int) -> NDArray[np.float64]:
    """Calculate the rolling average of y values."""
    if window_size <= 0:
        raise ValueError("Window size must be positive.")
    if window_size > len(y):
        raise ValueError("Window size cannot exceed the length of thedata.")
    return np.convolve(y, np.ones(window_size) / window_size, mode='same')  # type: ignore


def plot_graph(x: NDArray[np.float64], y: NDArray[np.float64], errors: NDArray[np.float64],
               anomalies_x: NDArray[np.float64], anomalies_y: NDArray[np.float64],
               continuum: NDArray[np.float64], target_name: str) -> None:
    """Plot the original data, smoothed data, anomalies, and continuum."""
    plt.figure(figsize=(10, 6))
    plt.xlabel("Wavelength (um)")
    plt.ylabel("Flux (Jy)") 

    plt.scatter(anomalies_x, anomalies_y, color='red', label='Anomalies', s=30)
    plt.errorbar(x, y, yerr=errors, fmt='.', color='blue', label='Data with Error')

    # Plot the fitted continuum.
    plt.plot(x, continuum, color='green', label='Continuum', linewidth=5)

    smoothed_y = savgol_filter(y, window_length=11, polyorder=2)
    plt.plot(x, smoothed_y, color='orange', label='Smoothed', linewidth=1.5)

    plt.legend()
    plt.grid(True)
    plt.title(f"Spectral Data of {target_name} with Anomalies, Smoothed Data, and Continuum")  # Dynamic title
    plt.show()


def main() -> None:
    """Main program loop."""

    init(autoreset=True)  # Colour printing initialization

    file_path = request_valid_file()
    if not file_path:
        print("No file selected. Exiting.")
        return

    lines = read_file_content(file_path)
    try:
        x, y, errors, target_name = parse_data(lines)
    except ValueError as e:
        print(f"Error parsing data: {e}")
        return

    threshold = get_threshold()
    continuum = fit_continuum(x, y, order=3)
    anomalies_x, anomalies_y = find_anomalies(x, y, continuum, threshold)

    plot_graph(x, y, errors, anomalies_x, anomalies_y, continuum, target_name)
    print("Exiting the program. Thank you for using it!")


if __name__ == "__main__":
    main()
